import requests
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
import telebot
import logging
import random
from django.http import HttpResponse
from functools import wraps
from datetime import datetime
from pytz import timezone, utc

# ---------------------------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ + —Ç–æ–∫–µ–Ω                       -
# ---------------------------------------------
# https://api.telegram.org/bot<TOKEN>/setwebhook?url=https://atarasov.ru/bot/<TOKEN>/
from apps.twitch_api.api import TwitchStartPointApi

TOKEN = settings.TELEGRAM_BOT_TOKEN
bot = telebot.TeleBot(TOKEN)
log = logging.getLogger(__name__)

# ---------------------------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞                         -
# ---------------------------------------------
KEYBOARD = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
KEYBOARD.add(
    telebot.types.KeyboardButton('/help'),
    telebot.types.KeyboardButton('/subscriptions'),
)


# ---------------------------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥      -
# ---------------------------------------------
COMMANDS = {'/start': '–ù–∞—á–∞–ª–æ',
            '/help': '–ü–æ–º–æ—â—å –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º',
            '/settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            '/subscriptions': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏',
            '/weather': '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ',
            '/schedule': '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã',
            '/story': '–£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏!',
            '/newfilms': '–ù–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã',
            }


# ---------------------------------------------
# –í—Ö–æ–¥ –±–æ—Ç–∞                                   -
# –û—Å–Ω–æ–≤–Ω–∞—è –≤—å—é—à–∫–∞ –¥–ª—è –±–æ—Ç–∞                    -
# ---------------------------------------------
@csrf_exempt
def bot_view(request):
    if 'CONTENT_TYPE' in request.META and request.META['CONTENT_TYPE'] == 'application/json':
        json_string = request.body.decode("utf-8")
        # log.info(json_string)
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_messages([update.message])
    return HttpResponse(status=200)


# ---------------------------------------------
# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä                                   -
# –ó–∞–ø—Ä–µ—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º      -
# ---------------------------------------------
def admin_only(func):
    @wraps(func)
    def wrapper(message):
        if message.from_user.id == 180469947:
            func(message)
        else:
            answer = '‚ùå‚ùå‚ùå\n*–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ `–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`.\n‚ùå‚ùå‚ùå'
            log.info(f'{message.from_user.id}:[{message.from_user.first_name} {message.from_user.last_name}|{message.from_user.language_code}] - –û–¢–ö–ê–ó–ê–ù–û –í –î–û–°–¢–£–ü–ï!')
            debug_message_to_me(message, answer)
            bot.send_message(message.chat.id,
                             answer,
                             parse_mode="Markdown",
                             reply_markup=KEYBOARD)
    return wrapper


# ---------------------------------------------
# /help                                       -
# –ü–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é                         -
# ---------------------------------------------
@bot.message_handler(regexp='/help|—É–º–µ–µ—à—å')
def help_messages(message):
    answer = ''
    # for command, hint in COMMANDS.items():
    #     answer += f'{command} - {hint}\n'
    answer += f'–ù–ò–ß–ï–ì–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢\n–ü–û–ö–ê'

    debug_message_to_me(message, answer)
    log.info(str(message.from_user.id) + ': ' + message.text)
    bot.send_message(message.chat.id,
                     answer, reply_markup=KEYBOARD)


# ---------------------------------------------
# /start                                      -
# –°—Ç–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º                     -
# ---------------------------------------------
@bot.message_handler(regexp='^/start$')
def start_messages(message):
    answer = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, `{message.from_user.first_name}`!\n–Ø –ë–æ—Ç - –ü–æ–º–æ—â–Ω–∏–∫." \
             f"\n–ú–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—Ä–∞–∑—ã –∏ —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã.\n" \
             f"–ù–∞–±–µ—Ä–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    # TelegramUser.objects.get_or_create(id=message.from_user.id)
    debug_message_to_me(message, answer)

    bot.send_message(message.chat.id,
                     answer,
                     parse_mode="markdown",
                     reply_markup=KEYBOARD)

@bot.message_handler(regexp='^/subscriptions$')
@admin_only
def twitch_subscribes(message):
    API = TwitchStartPointApi(token=settings.TWITCH_TOKEN)
    subscriptions = API.webhooks.subscriptions()

    answer = ''
    for stream in subscriptions:
        user_id = stream['topic'].split('=')[1]
        streamer_name = API.users(id=user_id)[0]['login']
        expires_at = stream['expires_at']
        utc_dt = datetime.strptime(expires_at, "%Y-%m-%dT%H:%M:%SZ")
        date_for_russians = utc_dt.replace(tzinfo=utc).astimezone(tz=timezone(settings.TIME_ZONE)).strftime("%d.%m.%Y %H:%M")
        answer += f'–°—Ç—Ä–∏–º–µ—Ä {streamer_name}, –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç: {date_for_russians}\n'
    log.info(answer)
    debug_message_to_me(message, answer)
    bot.send_message(message.chat.id,
                     str(answer),
                     parse_mode="html",
                     reply_markup=KEYBOARD)



@bot.message_handler(regexp='^(/subscribe \S*|sub \S*)$')
@admin_only
def twitch_subscribes(message):
    streamer_name = message.text.split(' ')[1]
    API = TwitchStartPointApi(token=settings.TWITCH_TOKEN)
    streamer_id = API.users(login=streamer_name)[0]['id']

    headers = {"Authorization": "Bearer " + settings.TWITCH_TOKEN}
    data = requests.post('https://api.twitch.tv/helix/webhooks/hub',
                         headers=headers,
                         data = {'hub.callback':"https://atarasov.ru/twitch_api/",
                                 'hub.mode': 'subscribe',
                                 'hub.lease_seconds': '864000',
                                 'hub.topic': f'https://api.twitch.tv/helix/streams?user_id={streamer_id}'})
    answer = f'{message.from_user.first_name}, –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {streamer_name}!'
    log.info(answer)
    debug_message_to_me(message, answer)
    bot.send_message(message.chat.id,
                     answer,
                     parse_mode="html",
                     reply_markup=KEYBOARD)

# ---------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥—è—â–∞—è –∫—É—Ä—Å –≤–∞–ª—é—Ç                -
# ---------------------------------------------
# @bot.message_handler(regexp='(–∫—É—Ä—Å –≤–∞–ª—é—Ç)')
# def get_money_messages(message):
#     try:
#         target_url = "http://www.cbr.ru/scripts/XML_daily.asp?date_req="
#
#         today_date = '{:02d}/{:02d}/{:04d}'.format(datetime.datetime.now().day, datetime.datetime.now().month,
#                                                    datetime.datetime.now().year)
#         yesterday_date = '{:02d}/{:02d}/{:04d}'.format((datetime.datetime.today() - datetime.timedelta(days=1)).day,
#                                                        (datetime.datetime.today() - datetime.timedelta(days=1)).month,
#                                                        (datetime.datetime.today() - datetime.timedelta(days=1)).year)
#
#         request_date_today = requests.get(target_url + today_date)
#         request_date_yesterday = requests.get(target_url + yesterday_date)
#
#         tree_today = ElementTree.fromstring(request_date_today.content)
#         tree_yesterday = ElementTree.fromstring(request_date_yesterday.content)
#         # —Å–º–æ—Ç—Ä–∏–º –≤—á–µ—Ä–∞—à–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
#         USD_yesterday = None
#         EUR_yesterday = None
#         for item in tree_yesterday:
#             if item[1].text == 'USD':
#                 USD_yesterday = item[4].text
#             if item[1].text == 'EUR':
#                 EUR_yesterday = item[4].text
#         # —Å–º–æ—Ç—Ä–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
#         USD_today = None
#         EUR_today = None
#         for item in tree_today:
#             if item[1].text == 'USD':
#                 USD_today = item[4].text
#             if item[1].text == 'EUR':
#                 EUR_today = item[4].text
#         # –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç
#         USD_difference = float(USD_today.replace(",", ".")) - float(USD_yesterday.replace(",", "."))
#         EUR_difference = float(EUR_today.replace(",", ".")) - float(EUR_yesterday.replace(",", "."))
#         # –í—ã–≤–æ–¥ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
#         answer = 'üìà–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
#         if USD_difference == 0:
#             answer += "–î–æ–ª–ª–∞—Ä –°–®–ê($) - " + USD_today + "\n"
#         elif USD_difference < 0:
#             answer += "–î–æ–ª–ª–∞—Ä –°–®–ê($) - " + USD_today + f"({USD_difference})\n"
#         elif USD_difference > 0:
#             answer += "–î–æ–ª–ª–∞—Ä –°–®–ê($) - " + USD_today + f"(+{USD_difference})\n"
#
#         if USD_difference == 0:
#             answer += "–ï–≤—Ä–æ(‚Ç¨) - " + EUR_today + "\n"
#         elif USD_difference < 0:
#             answer += "–ï–≤—Ä–æ(‚Ç¨) - " + EUR_today + f"({EUR_difference})\n"
#         elif USD_difference > 0:
#             answer += "–ï–≤—Ä–æ(‚Ç¨) - " + EUR_today + f"(+{EUR_difference})\n"
#     except:
#         answer = "–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç:("
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,
#                      reply_markup=KEYBOARD)


# Handle greeting messages
# @bot.message_handler(regexp='^(–ø—Ä–∏–≤–µ—Ç|—Å–∞–ª—é—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–±–æ–Ω–∂—É—Ä|—Ö–∞—é—à–∫–∏|—Ö–∞–π|hello|hi|–ó–¥–æ—Ä–æ–≤–æ)')
# def start_messages(message):
#     hello_message = ["–°–∞–ª—é—Ç!", "–ü—Ä–∏–≤–µ—Ç!", "–∑–¥—Ä–∞—Å—Ç–∏-–º–æ—Ä–¥–∞—Å—Ç–∏.", "–æ, –∫–∞–∫–∏–µ –ª—é–¥–∏!", "—Ñ–∏–∑–∫—É–ª—å—Ç-–ø—Ä–∏–≤–µ—Ç!", "–±–æ–Ω–∂—É—Ä!",
#                      "–ø—Ä–∏–≤–µ—Ç–∏–∫!", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!",
#                      "–ü—Ä–∏–≤–µ—Ç ‚Äî —ç—Ç–æ —Ç–∞–∫–∞—è —à—Ç—É–∫–∞, —á—Ç–æ –µ—Å–ª–∏ –µ–≥–æ –ø–æ—Ç–µ—Ä—è–µ—à—å, –ª—É—á—à–µ —É–∂–µ –Ω–µ –∏—Å–∫–∞—Ç—å.",
#                      "–û–π, –∑–¥—Ä–∞—Å—Ç–µ, –∑–¥—Ä–∞—Å—Ç–µ, –Ω–µ –æ–∂–∏–¥–∞–ª–∏!",
#                      "–Ø —á—Ç–æ, –∑–¥–æ—Ä–æ–≤–∞–ª—Å—è —Å —Ç–æ–±–æ–π?",
#                      ]
#     answer = f"{random.choice(hello_message).capitalize()}"
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# # Handle good morning messages
# @bot.message_handler(regexp='^(–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ)')
# def start_messages(message):
#     hello_message = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!",
#                      "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –æ–±–µ–¥–∞.",
#                      "–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –¥–æ–±—Ä–æ–µ, –∏ –æ–Ω–æ –Ω–µ –≤–∏–Ω–æ–≤–∞—Ç–æ, —á—Ç–æ —Ç—ã –Ω–µ –≤—ã—Å–ø–∞–ª—Å—è.",
#                      ]
#     answer = f"{random.choice(hello_message).capitalize()}"
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# # Handle good night  messages
# @bot.message_handler(regexp='^(–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏)')
# def start_messages(message):
#     hello_message = ["–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!",
#                      "¬´–ú–µ–Ω—è –∂–¥—É—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ¬ª ‚Äî —ç—Ç–æ –≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ, —á–µ–º ¬´—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏¬ª.",
#                      "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –ü—É—Å–∫–∞–π —Ç–µ–±–µ –ø—Ä–∏—Å–Ω–∏—Ç—Å—è —Ö–æ—Ä–æ—à–∏–π —Å–æ–Ω –æ–±–æ –º–Ω–µ, –ª–∞–¥–Ω–æ?",
#                      ]
#     answer = f"{random.choice(hello_message).capitalize()}"
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# Handle name messages
# @bot.message_handler(regexp='—Ç–µ–±—è –∑–æ–≤—É—Ç|—Ç–≤–æ–µ –∏–º—è|—Å–≤–æ—ë –∏–º—è')
# def my_name_messages(message):
#     answer_name_words = ['–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç', '–Ø –µ—Å—Ç—å –ë–æ—Ç!', '–õ—é–¥–∏ —á–∞—Å—Ç–æ –Ω–∞–∑—ã–≤–∞—é—Ç –º–µ–Ω—è –ë–æ—Ç. –ò —Ç—ã —Ç–∞–∫ –∑–æ–≤–∏!', '–Ø –ë–æ—Ç, –ø—Ä–æ—Å—Ç–æ –ë–æ—Ç.',
#                          f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {message.from_user.first_name}. –®—É—á—É. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç.', ]
#     answer = random.choice(answer_name_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# Handle thanks messages
# @bot.message_handler(regexp='—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|–º–µ—Ä—Å–∏|–±–ª–∞–≥–æ–¥–∞—Ä—Å—Ç–≤—É—é|—Å–ø–∞—Å–∏–±–æ—á–∫–∏|—Å–ø—Å|—Å—è–ø')
# def thanks_messages(message):
#     answer_thanks_words = ['–†–∞–¥ —Å—Ç–∞—Ä–∞—Ç—å—Å—è!',
#                            '–ù–µ –∑–∞ —á—Ç–æ!',
#                            '‚ò∫Ô∏è',
#                            '–û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ!',
#                            '–ù–µ —Å—Ç–æ–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏!',
#                            '–ò–∑ —Å–ø–∞—Å–∏–±–æ ‚Äî —à–∏–Ω–µ–ª–∏ –Ω–µ —Å–æ—à—å—ë—à—å!',
#                            ]
#     answer = random.choice(answer_thanks_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# Handle bot messages
# @bot.message_handler(regexp='^(bot|–±–æ—Ç)$')
# def bot_messages(message):
#     answer_bot_words = ['–ß–µ–≥–æ –∏–∑–≤–æ–ª–∏—Ç–µ?', '–ß—Ç–æ?', '–º?Ô∏è', '–ß—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–µ—à—å?)',
#                         '–Ø –∑–∞–Ω—è—Ç, –Ω–æ —Ä–∞–¥–∏ —Ç–µ–±—è –≥–æ—Ç–æ–≤ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è.', ]
#     answer = random.choice(answer_bot_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)
#
#
# # Handle not wants word messages
# @bot.message_handler(regexp='–Ω–µ —Ö–æ—á—É|–Ω–µ —Ö–æ—Ç–µ–ª–æ—Å—å|–Ω–µ —Ö–æ—Ç–µ—Ç—å|–Ω–µ –∂–∞–∂–¥–∞—Ç—å|–Ω–µ —Ö–æ—Ç–∏–º|–Ω–µ —Ö–æ—Ç–µ–ª–∞|–Ω–µ —Ö–æ—Ç–µ–ª–∏')
# def wants_word_messages(message):
#     answer_want_words = ['"–Ø –ø—Ä–æ—Å–∏–ª–∞ –º–æ—Ä–æ–∂–µ–Ω–æ–µ? –ù–µ —Ö–æ—á—É –º–æ—Ä–æ–∂–µ–Ω–æ–µ, —Ö–æ—á—É –∞–ø–µ–ª—å—Å–∏–Ω–∫—É."',
#                          '–Ø —Ç–æ–∂–µ –º–Ω–æ–≥–æ —á–µ–≥–æ –Ω–µ —Ö–æ—á—É.',
#                          '–ù–µ —Ö–æ—á—É —É—á–∏—Ç—å—Å—è, —Ö–æ—á—É –∂–µ–Ω–∏—Ç—å—Å—è!',
#                          '–•–æ—á—É, –Ω–µ —Ö–æ—á—É - –∞ –Ω–∞–¥–æ!',
#                          ]
#     answer = random.choice(answer_want_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# Handle wants word messages
# @bot.message_handler(regexp='—Ö–æ—á—É|—Ö–æ—Ç–µ–ª–æ—Å—å|—Ö–æ—Ç–µ—Ç—å|–∂–∞–∂–¥–∞—Ç—å|—Ö–æ—Ç–∏–º|—Ö–æ—Ç–µ–ª–∞|—Ö–æ—Ç–µ–ª–∏')
# def wants_word_messages(message):
#     answer_want_words = ['–Ø —Ç–æ–∂–µ –º–Ω–æ–≥–æ —á–µ–≥–æ —Ö–æ—á—É.',
#                          '–¢–µ–±–µ —ç—Ç–æ –Ω–µ –Ω–∞–¥–æ.',
#                          '–¢–∞–∫ —Å—Ö–æ–¥–∏ –∏ –ø–æ–ª—É—á–∏ —ç—Ç–æ.',
#                          '–Ø —Ö–æ—á—É...\n–ß–µ–≥–æ –∂–µ —è —Ö–æ—á—É?\n–ö–∞–∂–µ—Ç—Å—è, —è —Ö–æ—á—É –±—ã—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–º...',
#                          ]
#     answer = random.choice(answer_want_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# ---------------------------------------------
# /schedule                                   -
# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π, —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã     -
# ---------------------------------------------
# @bot.message_handler(regexp='—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|–ø–∞—Ä—ã|–∑–∞–Ω—è—Ç–∏—è|/schedule')
# def schedule_messages(message):
#     schedule = Schedule()
#     answer = schedule.get_lessons(message.text)
#     debug_message_to_me(message, answer)
#     bot.send_message(message.chat.id,
#                      answer,
#                      reply_markup=KEYBOARD)


# ---------------------------------------------
# /newfilms                                   -
# Rutracker –ø–∞—Ä—Å–µ—Ä –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤              -
# ---------------------------------------------
# @bot.message_handler(regexp='üì∫–ù–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã|/newfilms')
# def rutracker_messages(message):
#     answer = ''
#     for item in Rutracker.conclusion(12):
#         answer += f"üé•{item[1]}\nüîó `{item[0]}` \n üéô{item[2]} \n ‚öñÔ∏è{item[3]} \n üíé{item[4]}\n-\n"
#     answer = answer[:-2]
#     debug_message_to_me(message, answer)
#     bot.send_message(message.chat.id,
#                      answer,
#                      parse_mode="markdown",
#                      reply_markup=KEYBOARD)


# Handle smile messages
# @bot.message_handler(regexp='—Ö–∞—Ö–∞|\)\)')
# def smile_messages(message):
#     answer_smile_words = ['–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –∫–æ–≥–¥–∞ –ª—é–¥–∏ —Å–º–µ—é—Ç—Å—è.',
#                           'üòäÔ∏è',
#                           '–ú–Ω–µ —Ç–æ–∂–µ –≤–µ—Å–µ–ª–æ.',
#                           '–í –¥–æ–º, –≥–¥–µ —Å–º–µ—é—Ç—Å—è, –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—á–∞—Å—Ç—å–µ.',
#                           ]
#     answer = random.choice(answer_smile_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# Handle why messages
# @bot.message_handler(regexp='–ø–æ—á–µ–º—É|why')
# def why_messages(message):
#     answer_why_words = ['–Ø –Ω–µ –∑–Ω–∞—é.',
#                         '–°–ø—Ä–æ—Å–∏ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–≥—á–µ.Ô∏è',
#                         '–ù–µ –≤ –º–æ–∏—Ö —Å–∏–ª–∞—Ö –∑–Ω–∞—Ç—å:(',
#                         '–û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç ¬´–ø–æ—á–µ–º—É¬ª –∏ –∏—â–∏—Ç–µ ¬´–∫–∞–∫¬ª.',
#                         '–ò–Ω–æ–≥–¥–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å ¬´–ø–æ—á–µ–º—É¬ª –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞. –ò —ç—Ç–æ —Å—Ç—Ä–∞—à–Ω–æ.',
#                         '–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å–æ–º ¬´–ø–æ—á–µ–º—É¬ª ‚Äî –≥–ª–∞–≤–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥—É—à–µ–≤–Ω–æ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è.',
#                         ]
#     answer = random.choice(answer_why_words)
#
#     debug_message_to_me(message, answer)
#
#     bot.send_message(message.chat.id,
#                      answer,)


# ---------------------------------------------
# /story                                      -
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å –±–∞—à–∞          -
# ---------------------------------------------
# @bot.message_handler(regexp='—Å–∫—É—á–Ω–æ|/story|—Ä–∞—Å—Å–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—é|–°–ª—É—á–∞–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è|–∏—Å—Ç–æ—Ä–∏—è')
# def get_story_messages(message):
#     try:
#         target_url = "http://bash.im/random"
#         request = requests.get(target_url)
#         # request.encoding = 'utf-8'
#         soup = BeautifulSoup(request.text, "html.parser")
#         top_titles = soup.find_all("div", {"class": "text"})
#         answer = random.choice(top_titles).text
#     except:
#         answer = "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–π:("
#     debug_message_to_me(message, answer)
#     bot.send_message(message.chat.id,
#                      answer,
#                      reply_markup=KEYBOARD)


# Handle timer messages
# @bot.message_handler(regexp='‚è±–¢–∞–π–º–µ—Ä')
# def get_story_messages(message):
#     end_time = datetime.datetime(2018, 7, 31, 18, 50)
#     start_time = datetime.datetime.now()
#     difference_time = end_time - start_time
#     answer = f'‚è±‚è±‚è±\n–î–æ –æ—Ç–ª–µ—Ç–∞ —Å–∞–º–æ–ª–µ—Ç–∞(31.07.18 18:50) –≤ –¢–∞–∏–ª–∞–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å: \n{difference_time.days}–¥. {difference_time.seconds//3600}—á. {(difference_time.seconds//60)%60}–º. {difference_time.seconds % 60}c.\n‚è±‚è±‚è±'
#     debug_message_to_me(message, answer)
#     bot.send_message(message.chat.id,
#                      answer,
#                      reply_markup=keyboard)


# Handle all other messages
# @bot.message_handler(func=lambda message: True, content_types=['text'])
# def echo_message(message):
#     answer = communication(message)
#     debug_message_to_me(message, answer)
#     bot.send_message(message.chat.id, answer, reply_markup=KEYBOARD)




#
# def communication(message):
#     random.seed()
#
#     colour_words = ["–≤–æ–µ–Ω–Ω–æ-–≤–æ–∑–¥—É—à–Ω—ã–π —Å–∏–Ω–∏–π", "—Å–∏–Ω–∏–π —ç–ª–∏—Å", "–∞–ª–∏–∑–∞—Ä–∏–Ω–æ–≤—ã–π –∫—Ä–∞—Å–Ω—ã–π", "–º–∏–Ω–¥–∞–ª—å –∫—Ä–∞–π–æ–ª–∞", "–∞–º–∞—Ä–∞–Ω—Ç–æ–≤—ã–π",
#                "—è–Ω—Ç–∞—Ä–Ω—ã–π", "–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Ä–æ–∑–∞", "–∞–º–µ—Ç–∏—Å—Ç–æ–≤—ã–π", "–º–∞—Ç–æ–≤—ã–π –±–µ–ª—ã–π", "–∞–Ω—Ç–∏—á–Ω—ã–π –±–µ–ª—ã–π", "—è–±–ª–æ—á–Ω–æ-–∑–µ–ª—ë–Ω—ã–π",
#                "—Å–ø–∞—Ä–∂–∞",
#                "—Ü–≤–µ—Ç –º–æ—Ä—Å–∫–æ–π –≤–æ–ª–Ω—ã", "–∞–∫–≤–∞–º–∞—Ä–∏–Ω–æ–≤—ã–π", "–∞—Ä–º–µ–π—Å–∫–∏–π –∑–µ–ª—ë–Ω—ã–π", "–º—ã—à—å—è–∫–æ–≤—ã–π", "–ª–∞–∑—É—Ä–Ω—ã–π", "–≥–æ–ª—É–±–æ–≤–∞—Ç–æ-—Å–µ—Ä—ã–π",
#                "–±–µ–∂–µ–≤—ã–π", "—á—ë—Ä–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "—Ö–∞–∫–∏", "–º–µ–¥–Ω—ã–π", "–≥–æ–ª—É–±–æ–π", "–∏–∑—É–º—Ä—É–¥–Ω—ã–π", "–∑–æ–ª–æ—Ç–æ–π",
#                "–∑–µ–ª—ë–Ω—ã–π", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "—Ä–æ–∑–æ–≤—ã–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–∫—Ä–∞—Å–Ω—ã–π", "—Å–µ—Ä–µ–±—Ä—è–Ω—ã–π", "—Ç–æ–º–∞—Ç–Ω—ã–π", "–±–µ–ª—ã–π", "–∂—ë–ª—Ç—ã–π"]
#     if '—Ü–≤–µ—Ç' in message.text.lower():
#         return f"–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {random.choice(colour_words)}."
#
#
#     choice_words = ['–≤—ã–±—Ä–∞—Ç—å', '–≤—ã–±–µ—Ä–∏', "/choice", ]
#     answer_choice_words = ['–ø—É—Å—Ç—å –±—É–¥–µ—Ç', '—è –≤—ã–±–∏—Ä–∞—é', "–º–æ–∂–µ—Ç –±—ã—Ç—å",
#                            "–≤—ã—à–µ–ª –º–µ—Å—è—Ü –∏–∑ —Ç—É–º–∞–Ω–∞, –≤—ã–Ω—É–ª –Ω–æ–∂–∏–∫ –∏–∑ –∫–∞—Ä–º–∞–Ω–∞. –±—É–¥—É —Ä–µ–∑–∞—Ç—å, –±—É–¥—É –±–∏—Ç—å ‚Äì –≤—Å–µ —Ä–∞–≤–Ω–æ —Ç–µ–±–µ –≤–æ–¥–∏—Ç—å! -", ]
#     if any(word in choice_words for word in message.text.lower().split(" ")) and len(
#             [int(s) for s in message.text.split() if s.isdigit()]) > 1:
#         return random.choice(answer_choice_words) + " " + str(
#                 random.choice([int(s) for s in message.text.split() if s.isdigit()]))
#
#     my_message = ["–¢–∞–∫ —Å–µ–±–µ", "–î–∞–≤–∞–π —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ", "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ", "–ë—ã—Ç—å –º–æ–∂–µ—Ç", "–ó–∞–º–∞–Ω—á–∏–≤–∞—è –∏–¥–µ—è!", "–ú–æ–∂–µ—Ç –Ω–µ —Å—Ç–æ–∏—Ç",
#                   "–ß—É–¥–µ—Å–Ω–æ!", "–ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–µ–≥–æ–¥–Ω—è –ø–æ—É—á–∏—Ç—å—Å—è", "–º–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è",
#                   "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é", "–¥–∞–≤–∞–π –ø–æ—Ç–æ–º –æ–± —ç—Ç–æ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º", ]
#     return random.choice(my_message)






