import requests
from datetime import datetime, timedelta
import re


class Schedule:
    def __init__(self):
        self.__target_url = "https://mai.ru/education/schedule/data/–ú3–û-220–ú-17.txt"
        self.__request = requests.get(self.__target_url)
        self.__lessons = self.__request.text.split('\n')
        self.__answer = 'üóì'

    def __get_lessons_for(self, date):
        lessons = ['']
        for line in self.__lessons:
            if date in line:
                items = line.split('\t')
                lessons[0] = date + f' {items[1]}'
                if f'üïò{items[2]}-{items[3]}\n' not in lessons[-1]:
                    lessons.append(f'üïò{items[2]}-{items[3]}\nüìö{items[4]}\nüë®‚Äçüè´{items[5]}\nüìç{items[6]}\n')
                else:
                    lessons[-1] = lessons[-1][:-1] + f', {items[6]}\n'
        if lessons == ['']:
            return None
        else:
            return lessons

    def __nearest_lessons(self, text_day):
        lessons = []
        for i in range(1, 8):
            if self.__get_lessons_for((datetime.now().date() + timedelta(days=i)).strftime('%d.%m')):
                lessons = self.__get_lessons_for(
                        (datetime.now().date() + timedelta(days=i)).strftime('%d.%m'))
                break
        if lessons:
            self.__answer += f'{text_day} –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—É–¥–µ—Ç. –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ–π–¥—É—Ç {lessons[0]}\n'
            self.__answer += '\n-\n'.join(lessons[1:])
        else:
            self.__answer += '–í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ –±—É–¥–µ—Ç.'

    def get_lessons(self, message):
        date_in_message = re.findall('(?:0[1-9]|[12][0-9]|3[01])[- /.,](?:0[1-9]|1[012])', message)
        if '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in message.lower():
            lessons = self.__get_lessons_for((datetime.now().date() + timedelta(days=2)).strftime('%d.%m'))
            if lessons:
                self.__answer += f'–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {len(lessons) - 1} –ø–∞—Ä—ã:\n'
                self.__answer += '\n-\n'.join(lessons[1:])
            else:
                self.__nearest_lessons("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")
            return self.__answer
        elif '–∑–∞–≤—Ç—Ä–∞' in message.lower():
            lessons = self.__get_lessons_for((datetime.now().date() + timedelta(days=1)).strftime('%d.%m'))
            if lessons:
                self.__answer += f'–ó–∞–≤—Ç—Ä–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {len(lessons) - 1} –ø–∞—Ä—ã:\n'
                self.__answer += '\n-\n'.join(lessons[1:])
            else:
                self.__nearest_lessons("–ó–∞–≤—Ç—Ä–∞")
            return self.__answer
        elif date_in_message:
            lessons = self.__get_lessons_for(datetime.strptime(date_in_message[0], f'%d{date_in_message[0][2]}%m').strftime('%d.%m'))
            if lessons:
                self.__answer += f'–í —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {len(lessons) - 1} –ø–∞—Ä—ã:\n'
                self.__answer += '\n-\n'.join(lessons[1:])
            else:
                self.__nearest_lessons("–í —ç—Ç–æ—Ç –¥–µ–Ω—å")
            return self.__answer
        else:
            lessons = self.__get_lessons_for((datetime.now().date()).strftime('%d.%m'))
            if lessons:
                self.__answer += f'–°–µ–≥–æ–¥–Ω—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é {len(lessons) - 1} –ø–∞—Ä—ã:\n'
                self.__answer += '\n-\n'.join(lessons[1:])
            else:
                self.__nearest_lessons("–°–µ–≥–æ–¥–Ω—è")
            return self.__answer



